name: 'Jira Issue Required'
author: 'José Luis da Cruz Junior'
description: 'Action para garantir que o merge só seja permitido quando a branch do PR estiver associada a um card do Jira.'

inputs:
  jira_base_url:
    required: true
    description: https://<your_org>.atlassian.net
  jira_user_email:
    required: true
    description: your_user@your_domain.com
  jira_api_token:
    required: true
    description: Create one at https://id.atlassian.com/manage-profile/security/api-tokens
  jira_alternative_base_url:
    required: false
    description: https://<your_org>.atlassian.net
  jira_alternative_user_email:
    required: false
    description: your_user@your_domain.com
  jira_alternative_api_token:
    required: false
    description: Create one at https://id.atlassian.com/manage-profile/security/api-tokens
  possible_issue_reference:
    description: Uma string que possivelmente contém o issue no Jira. Pode ser o nome da branch, o título do PR, etc. O padrão é o nome da branch.
    default: ""
  jira_status_allowed_to_merge:
    required: true
    description: O status do Jira que permite o merge -> To Deployment
  default_hotfix_prefix:
    required: false
    description: Prefixo da branch de hotfix. Default -> hotfix/
  default_revert_prefix:
    required: false
    description: Prefixo da branch de revert. Default -> revert/

runs:
  using: composite
  steps:
    - name: Setup | Environment
      shell: bash
      run: |
        echo "POSSIBLE_ISSUE_REFERENCE=${{ inputs.possible_issue_reference }}" >> "$GITHUB_ENV"
        echo "ISSUE_KEY_FOUND=0" >> "$GITHUB_ENV"
        echo "PREFIX_TO_IGNORE_FOUND=0" >> "$GITHUB_ENV"
        echo "BRANCH_NAME=0" >> "$GITHUB_ENV"

    - name: Get Possible Issue Reference - Default / Push Event in PR
      if: env.POSSIBLE_ISSUE_REFERENCE == '' && github.event_name == 'push' && github.event.pull_request != null
      shell: bash
      run: echo "POSSIBLE_ISSUE_REFERENCE=${{ github.ref_name }} ${{ github.event.pull_request.title }}" >> "$GITHUB_ENV"

    - name: Get Possible Issue Reference - Default / Push Event without PR
      if: env.POSSIBLE_ISSUE_REFERENCE == '' && github.event_name == 'push'
      shell: bash
      run: echo "POSSIBLE_ISSUE_REFERENCE=${{ github.ref_name }}" >> "$GITHUB_ENV"

    - name: Get Possible Issue Reference - Default / Pull Request Event
      if: env.POSSIBLE_ISSUE_REFERENCE == '' && startsWith(github.event_name, 'pull_request')
      shell: bash
      run: echo "POSSIBLE_ISSUE_REFERENCE=${{ github.head_ref }} ${{ github.event.pull_request.title }}" >> "$GITHUB_ENV"

    - name: Get Branch name for Hotfix/Revert exceptions
      shell: bash
      run: |
        if [[ -n "${{ github.event.pull_request.head.ref }}" ]]; then
          echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_ENV"
        else
          echo "BRANCH_NAME=${{ github.ref_name }}" >> "$GITHUB_ENV"
        fi

    - name: Check if issue key exists
      env:
        JIRA_BASE_URL: ${{ inputs.jira_base_url }}
        JIRA_USER_EMAIL: ${{ inputs.jira_user_email }}
        JIRA_API_TOKEN: ${{ inputs.jira_api_token }}
        JIRA_STATUS_ALLOWED_TO_MERGE: ${{ inputs.JIRA_STATUS_ALLOWED_TO_MERGE }}
        DEFAULT_HOTFIX_PREFIX: ${{ inputs.default_hotfix_prefix }}
        DEFAULT_REVERT_PREFIX: ${{ inputs.default_revert_prefix }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
      shell: bash
      run: |
        ISSUE_KEY=$(echo "$POSSIBLE_ISSUE_REFERENCE" | grep -oE '[a-zA-Z0-9]{1,10}-[0-9]+' | head -n 1)
        echo "ISSUE_KEY=$ISSUE_KEY" >> "$GITHUB_ENV"

        echo "DEFAULT_HOTFIX_PREFIX [$DEFAULT_HOTFIX_PREFIX]"
        echo "DEFAULT_REVERT_PREFIX [$DEFAULT_REVERT_PREFIX]"
        echo "BRANCH_NAME [$BRANCH_NAME]"

        if [[ "${{ env.BRANCH_NAME }}" == "${{ env.DEFAULT_HOTFIX_PREFIX }}"* ]]; then
          echo "PREFIX_TO_IGNORE_FOUND=1" >> "$GITHUB_ENV"
          echo "Hotfix branch detected, skipping Jira issue status check."
          exit 0
        fi

        if [[ "${{ env.BRANCH_NAME }}" == "${{ env.DEFAULT_REVERT_PREFIX }}"* ]]; then
          echo "PREFIX_TO_IGNORE_FOUND=1" >> "$GITHUB_ENV"
          echo "Revert branch detected, skipping Jira issue status check."
          exit 0
        fi

        echo "Searching for Jira issue $ISSUE_KEY at $JIRA_BASE_URL"
        JIRA_API_ISSUE_ENDPOINT="$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY?fields=key,status"
        echo "Requesting issue at $JIRA_API_ISSUE_ENDPOINT"
        JIRA_RESPONSE_STATUS=$(curl --request GET --url "$JIRA_API_ISSUE_ENDPOINT" --user "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" | jq .fields.status.name) >> "$GITHUB_ENV"
        echo "Response Status [$JIRA_RESPONSE_STATUS]"
        echo "JIRA_STATUS_ALLOWED_TO_MERGE -> [$JIRA_STATUS_ALLOWED_TO_MERGE]"
        echo "JIRA_RESPONSE_STATUS=$JIRA_RESPONSE_STATUS" >> "$GITHUB_ENV"
        echo "JIRA_STATUS_ALLOWED_TO_MERGE=$JIRA_STATUS_ALLOWED_TO_MERGE" >> "$GITHUB_ENV"

        if [ "$JIRA_RESPONSE_STATUS" != "null" ]; then
          echo "ISSUE_KEY_FOUND=1" >> "$GITHUB_ENV"
          echo "Issue key found!"
        fi

    - name: Check if issue key exists in alternative Jira
      if: env.ISSUE_KEY_FOUND == 0 && env.PREFIX_TO_IGNORE_FOUND==0 && inputs.jira_alternative_base_url != '' && inputs.jira_alternative_user_email != '' && inputs.jira_alternative_api_token != ''
      env:
        JIRA_BASE_URL: ${{ inputs.jira_alternative_base_url }}
        JIRA_USER_EMAIL: ${{ inputs.jira_alternative_user_email }}
        JIRA_API_TOKEN: ${{ inputs.jira_alternative_api_token }}
        JIRA_STATUS_ALLOWED_TO_MERGE: ${{ inputs.JIRA_STATUS_ALLOWED_TO_MERGE }}
        DEFAULT_HOTFIX_PREFIX: ${{ inputs.default_hotfix_prefix }}
        DEFAULT_REVERT_PREFIX: ${{ inputs.default_revert_prefix }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
      shell: bash
      run: |
        ISSUE_KEY=$(echo "$POSSIBLE_ISSUE_REFERENCE" | grep -oE '[a-zA-Z0-9]{1,10}-[0-9]+' | head -n 1)
        echo "ISSUE_KEY=$ISSUE_KEY" >> "$GITHUB_ENV"
        echo "Alternative Jira check"

        echo "DEFAULT_HOTFIX_PREFIX [$DEFAULT_HOTFIX_PREFIX]"
        echo "DEFAULT_REVERT_PREFIX [$DEFAULT_REVERT_PREFIX]"
        echo "BRANCH_NAME [$BRANCH_NAME]"

        if [[ "${{ env.BRANCH_NAME }}" == "${{ env.DEFAULT_HOTFIX_PREFIX }}"* ]]; then
          echo "PREFIX_TO_IGNORE_FOUND=1" >> "$GITHUB_ENV"
          echo "Hotfix branch detected, skipping Jira issue status check."
          exit 0
        fi

        if [[ "${{ env.BRANCH_NAME }}" == "${{ env.DEFAULT_REVERT_PREFIX }}"* ]]; then
          echo "PREFIX_TO_IGNORE_FOUND=1" >> "$GITHUB_ENV"
          echo "Revert branch detected, skipping Jira issue status check."
          exit 0
        fi

        echo "Searching for Jira issue $ISSUE_KEY at $JIRA_BASE_URL"
        JIRA_API_ISSUE_ENDPOINT="$JIRA_BASE_URL/rest/api/2/issue/$ISSUE_KEY?fields=key,status"
        echo "Requesting issue at $JIRA_API_ISSUE_ENDPOINT"
        JIRA_RESPONSE_STATUS=$(curl --request GET --url "$JIRA_API_ISSUE_ENDPOINT" --user "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" | jq .fields.status.name) >> "$GITHUB_ENV"
        echo "Response Status [$JIRA_RESPONSE_STATUS]"
        echo "JIRA_STATUS_ALLOWED_TO_MERGE -> [$JIRA_STATUS_ALLOWED_TO_MERGE]"
        echo "JIRA_RESPONSE_STATUS=$JIRA_RESPONSE_STATUS" >> "$GITHUB_ENV"
        echo "JIRA_STATUS_ALLOWED_TO_MERGE=$JIRA_STATUS_ALLOWED_TO_MERGE" >> "$GITHUB_ENV"

        if [ "$JIRA_RESPONSE_STATUS" != "null" ]; then
          echo "ISSUE_KEY_FOUND=1" >> "$GITHUB_ENV"
          echo "Issue key found!"
        fi

    - name: Fail if not found
      if: env.ISSUE_KEY_FOUND == 0 && env.PREFIX_TO_IGNORE_FOUND == 0
      shell: bash
      run: |
        echo "Issue not found in '${{ env.POSSIBLE_ISSUE_REFERENCE }}'!"
        exit 1

    - name: Fail if status is not allowed to deploy
      if: env.ISSUE_KEY_FOUND == 1 && env.PREFIX_TO_IGNORE_FOUND == 0
      shell: bash
      run: |
        JIRA_STATUS_ALLOWED_TO_MERGE_STR="${{ env.JIRA_STATUS_ALLOWED_TO_MERGE }}"
        if [ ${{ env.JIRA_RESPONSE_STATUS }} != "$JIRA_STATUS_ALLOWED_TO_MERGE_STR" ]; then
          echo "Issue status is not allowed to merge because ${{ env.JIRA_RESPONSE_STATUS }} is not $JIRA_STATUS_ALLOWED_TO_MERGE_STR!"
          exit 1
        fi
