name: 'Jira Issue Required'
author: 'José Luis da Cruz Junior'
description: 'Action para garantir que o merge só seja permitido quando a branch do PR estiver associada a um card do Jira.'

inputs:
  jira_base_url:
    required: true
    description: https://<your_org>.atlassian.net
  jira_user_email:
    required: true
    description: your_user@your_domain.com
  jira_api_token:
    required: true
    description: Create one at https://id.atlassian.com/manage-profile/security/api-tokens
  jira_alternative_base_url:
    required: false
    description: https://<your_org>.atlassian.net
  jira_alternative_user_email:
    required: false
    description: your_user@your_domain.com
  jira_alternative_api_token:
    required: false
    description: Create one at https://id.atlassian.com/manage-profile/security/api-tokens
  possible_issue_reference:
    description: Uma string que possivelmente contém o issue no Jira. Pode ser o nome da branch, o título do PR, etc. O padrão é o nome da branch.
    default: ""

runs:
  using: composite
  steps:
    - name: Setup | Environment
      shell: bash
      run: |
        echo "POSSIBLE_ISSUE_REFERENCE=${{ inputs.possible_issue_reference }}" >> "$GITHUB_ENV"
        echo "ISSUE_KEY_FOUND=0" >> "$GITHUB_ENV"

    - name: Get Possible Issue Reference - Default / Push Event in PR
      if: env.POSSIBLE_ISSUE_REFERENCE == '' && github.event_name == 'push' && github.event.pull_request != null
      shell: bash
      run: echo "POSSIBLE_ISSUE_REFERENCE=${{ github.ref_name }} ${{ github.event.pull_request.title }}" >> "$GITHUB_ENV"

    - name: Get Possible Issue Reference - Default / Push Event without PR
      if: env.POSSIBLE_ISSUE_REFERENCE == '' && github.event_name == 'push'
      shell: bash
      run: echo "POSSIBLE_ISSUE_REFERENCE=${{ github.ref_name }}" >> "$GITHUB_ENV"

    - name: Get Possible Issue Reference - Default / Pull Request Event
      if: env.POSSIBLE_ISSUE_REFERENCE == '' && startsWith(github.event_name, 'pull_request')
      shell: bash
      run: echo "POSSIBLE_ISSUE_REFERENCE=${{ github.head_ref }} ${{ github.event.pull_request.title }}" >> "$GITHUB_ENV"

    - name: Check if issue key exists
      env:
        JIRA_BASE_URL: ${{ inputs.jira_base_url }}
        JIRA_USER_EMAIL: ${{ inputs.jira_user_email }}
        JIRA_API_TOKEN: ${{ inputs.jira_api_token }}
        JIRA_STATUS_ALLOWED_TO_MERGE: ${{ inputs.JIRA_STATUS_ALLOWED_TO_MERGE }}
      shell: bash
      run: |
        echo "Searching for Jira issue $POSSIBLE_ISSUE_REFERENCE at $JIRA_BASE_URL"
        JIRA_API_ISSUE_ENDPOINT="$JIRA_BASE_URL/rest/api/2/issue/$POSSIBLE_ISSUE_REFERENCE?fields=key,status"
        echo "Requesting issue at $JIRA_API_ISSUE_ENDPOINT"
        JIRA_RESPONSE_STATUS=$(curl --request GET --url "$JIRA_API_ISSUE_ENDPOINT" --user "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" | jq .fields.status.name)
        echo "Response Status [$JIRA_RESPONSE_STATUS]"

        if [ "$JIRA_RESPONSE_STATUS" != "null" ]; then
          echo "ISSUE_KEY_FOUND=1" >> "$GITHUB_ENV"
          echo "Issue key found!"
        fi

    - name: Check if issue key exists in alternative Jira
      if: env.ISSUE_KEY_FOUND == 0 && inputs.jira_alternative_base_url != '' && inputs.jira_alternative_user_email != '' && inputs.jira_alternative_api_token != ''
      env:
        JIRA_BASE_URL: ${{ inputs.jira_alternative_base_url }}
        JIRA_USER_EMAIL: ${{ inputs.jira_alternative_user_email }}
        JIRA_API_TOKEN: ${{ inputs.jira_alternative_api_token }}
        JIRA_STATUS_ALLOWED_TO_MERGE: ${{ inputs.JIRA_STATUS_ALLOWED_TO_MERGE }}
      shell: bash
      run: |
        echo "Searching for Jira issue $POSSIBLE_ISSUE_REFERENCE at $JIRA_BASE_URL"
        JIRA_API_ISSUE_ENDPOINT="$JIRA_BASE_URL/rest/api/2/issue/$POSSIBLE_ISSUE_REFERENCE?fields=key,status"
        echo "Requesting issue at $JIRA_API_ISSUE_ENDPOINT"
        JIRA_RESPONSE_STATUS=$(curl --request GET --url "$JIRA_API_ISSUE_ENDPOINT" --user "${JIRA_USER_EMAIL}:${JIRA_API_TOKEN}" | jq .fields.status.name)
        echo "Response Status [$JIRA_RESPONSE_STATUS]"

        if [ "$JIRA_RESPONSE_STATUS" != "null" ]; then
          echo "ISSUE_KEY_FOUND=1" >> "$GITHUB_ENV"
          echo "Issue key found in alternative Jira!"
        fi

    - name: Fail if not found
      if: env.ISSUE_KEY_FOUND == 0
      shell: bash
      run: |
        echo "Issue not found in '${{ env.POSSIBLE_ISSUE_REFERENCE }}'!"
        exit 1

    - name: Fail if status is not allowed to deploy
      if: env.ISSUE_KEY_FOUND == 1 && (JIRA_RESPONSE_STATUS != $JIRA_STATUS_ALLOWED_TO_MERGE)
      shell: bash
      run: |
        echo "Issue status is not allowed to merge because '${{ JIRA_RESPONSE_STATUS }}' is not $JIRA_STATUS_ALLOWED_TO_MERGE!"
        exit 1
